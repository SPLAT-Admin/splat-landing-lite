name: QA Smoke Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: "0 5 * * *" # Every night at 5 AM UTC (~midnight PT)
  workflow_dispatch:
    inputs:
      trigger:
        description: "Reason for run (manual, nightly, push)"
        required: false
        default: manual

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install deps
        run: npm install

      - name: Run smoke tests
        run: npx playwright test tests/smoke.spec.ts --reporter=json > smoke-results.json

      - name: Run dev-only endpoint tests
        run: npx playwright test tests/devOnlyEndpoints.spec.ts --reporter=json > dev-only-results.json

      - name: Push Dev-only Endpoint Results to Notion
        run: |
          node - <<'EON'
          import fs from "fs";
          import fetch from "node-fetch";

          const results = JSON.parse(fs.readFileSync("dev-only-results.json", "utf-8"));
          const now = new Date().toISOString();

          async function pushResult(test) {
            const status = test.outcome === "expected" ? "Pass" : "Fail";
            const res = await fetch("https://api.notion.com/v1/pages", {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${process.env.NOTION_TOKEN}`,
                "Content-Type": "application/json",
                "Notion-Version": "2022-06-28"
              },
              body: JSON.stringify({
                parent: { database_id: process.env.NOTION_QA_DB },
                properties: {
                  Check: { title: [{ text: { content: test.title } }] },
                  Status: { select: { name: status } },
                  Area: { select: { name: "Dev-only Endpoints" } },
                  Env: { select: { name: process.env.NODE_ENV || "CI" } },
                  Date: { date: { start: now } }
                }
              })
            });

            if (!res.ok) {
              console.error(`❌ Failed to push result: ${test.title}`, res.status, await res.text());
            } else {
              console.log(`✅ Logged ${test.title} → ${status}`);
            }
          }

          (async () => {
            const tests = results.suites.flatMap(s => s.specs).flatMap(s => s.tests);
            for (const test of tests) {
              if (test.title.includes("create-admin") || test.title.includes("reset-password")) {
                await pushResult(test);
              }
            }
          })();
          EON
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_QA_DB: ${{ secrets.NOTION_QA_DB }}

      - name: Push Smoke Test Results to Notion
        run: |
          node - <<'EON'
          const fs = require("fs");
          const fetch = require("node-fetch");

          const notionToken = process.env.NOTION_TOKEN;
          const dbId = process.env.NOTION_QA_DB;
          const results = JSON.parse(fs.readFileSync("smoke-results.json", "utf8"));
          const now = new Date().toISOString();

          async function pushResult(test) {
            const status = test.status === "passed" ? "✅ Pass" : "❌ Fail";
            const res = await fetch("https://api.notion.com/v1/pages", {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${notionToken}`,
                "Content-Type": "application/json",
                "Notion-Version": "2022-06-28"
              },
              body: JSON.stringify({
                parent: { database_id: dbId },
                properties: {
                  Check: { title: [{ text: { content: test.title } }] },
                  Status: { select: { name: status } },
                  Area: { select: { name: "Smoke" } },
                  Env: { select: { name: process.env.GITHUB_WORKFLOW || "CI" } },
                  Date: { date: { start: now } }
                }
              })
            });

            if (!res.ok) {
              console.error(`❌ Failed to push result: ${test.title}`, res.status, await res.text());
            } else {
              console.log(`✅ Logged ${test.title} → ${status}`);
            }
          }

          (async () => {
            const tests = results.suites
              .flatMap(s => s.specs)
              .flatMap(s => s.tests);
            for (const test of tests) {
              await pushResult(test);
            }
          })();
          EON
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_QA_DB: ${{ secrets.NOTION_QA_DB }}
